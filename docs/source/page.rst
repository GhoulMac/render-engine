
Most components represented content in HTML, XML, or user-facing JSON generated by Render Engine should be a Page object.

Pages can be rendered directly from a template or generated from a file.

Page objects can be used to extend existing page objects.

Attributes:
    title (typing.Optional[str]): title of the :class:`Page <.Page>` object
    engine (str): **[Optional]**
        The engine the :class:`Site <.site.Site>` should use to generate markup. By
        default this is `Jinja2 <https://palletsprojects.com/p/jinja/>`_.
    template (str): **[Optional]** template filename for the :attr:`engine
        <.site.Site.engine>` to look for. If defined, it must be a valid file.
    content_path (str): **[Optional]** The filepath to load content from.

        The `content_path` will be checked for additional attributes
        and :attr:`base_content <Page.base_content>`.

        Raises:
            FileNotFoundError:
                If a `content_path` was supplied path that points to a path that does not exist.

        For more information about content paths, markdown and content_path rendering
        see ``:ref:<page_from_content_path.rst>``
    base_content (str):  **[Optional]** Pre-rendered markdown or HTML to be converted to Markup.

        Uses the `Markdown2 <https://pypi.org/project/markdown2/>`_ generator.


        If ``content_path`` is provided the content section of the file will be stored
        as the `base_content`
    list_attrs (typing.Optional[typing.List[str]]): list of attributes whose string
    values should be converted
        to a comma-delimited list

        This is primarily for converting a comma-separated list of values provided in
        your ``content_path``

        Example::

            >>> class myPage(Page):
                list_attrs = ["foo"]

            # calling myPage will convert the string value of `foo` to a list of values

            >>> myPage(foo='my, values, here')
            >>> myPage.foo
            ["my", "values", "here"]

    slug (str): **[Optional]** The rendered pages filename

        A slug passed in will be `slugified <https://github.com/un33k/python-slugify>`_
        to ensure a valid path is given. ``eg. slug="my cool slug" == "my-cool-slug"``

        If no slug is provided the class name will be used as the slug.::

            class MyPage(Page):
                pass

            # the path for this page would be https://example.com/mypage


    routes (list[str]): the directory in the       
        :attr:`output_path <.site.Site.output_path>` that the :class:`Page <.page.Page>` should be created.

        An empty string will apply the route at the root. 

        Example:
            a route of ["", "pages"] for a :py:class `render_engine.Page`: object with the
            :py:attr `Page.slug`: "foo" would generate the same page for both the routes *https://example.com/foo.html* and  *https://example.com/**pages**/foo.html*.
    
    markdown_extras: (list[str]) : Plugins to be included 
        when generating HTML from your ``base_content``.

        For more information on available extras or creating your own, see the `Markdown2 <https://pypi.org/project/markdown2/>`_ documentation

        
"""
